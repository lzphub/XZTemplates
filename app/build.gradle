apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
android {

    compileSdkVersion build_versions.compile_sdk

    defaultConfig {
        multiDexEnabled true

        applicationId "cn.xz.xzktsample"
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        buildToolsVersion build_versions.build_tools
        versionCode 1
        versionName "1.0.0"

        //路由
        javaCompileOptions.annotationProcessorOptions {
            arguments = [moduleName: project.getName()]
        }
        manifestPlaceholders = [
                //MTA
                MTA_APPKEY   : "xx",
                MTA_CHANNEL  : "xx",

                //极光推送
                JPUSH_PKGNAME: applicationId,
                JPUSH_APPKEY : "xx", //JPush上注册的包名对应的appkey.
                JPUSH_CHANNEL: "xx-default", //暂时填写默认值即可.
        ]

    }
   /* adbOptions {
        timeOutInMs=5*1000
        installOptions '-r','-s'
    }
*/
    signingConfigs {

        def appStoreFilePath = System.getProperty('StoreFilePath')
        def appStorePassword = System.getProperty('StorePassword')
        def appKeyAlias = System.getProperty('KeyAlias')
        def appKeyPassword = System.getProperty('KeyPassword')

        /*   Properties properties = new Properties()
           if (rootProject.file("local.properties").exists()) {
               properties.load(rootProject.file("local.properties").newDataInputStream())
               storeFilePath= properties.get("STOREFILE")
               storePassword= properties.get("STOREPASSWORD")
               keyAlias= properties.get("KEYALIAS")
               keyPassword= properties.get("KEYPASSWORD")
           }*/

        if (!appStoreFilePath || !appStorePassword || !appKeyAlias || !appKeyPassword) {
            //将.android下的debug.keystore放到app目录下
            appStoreFilePath = "debug.keystore"
            appStorePassword = "android"
            appKeyAlias = "androiddebugkey"
            appKeyPassword = "android"
        }

        jenkins {
            storeFile file(appStoreFilePath)
            storePassword appStorePassword
            keyAlias appKeyAlias
            keyPassword appKeyPassword
        }

    }

    buildTypes {
        debug {
            zipAlignEnabled true
            minifyEnabled false
//            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.jenkins
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    //DomainObjectCollection集合
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            if (output.outputFile != null && output.outputFile.name.endsWith('.apk')
                    && 'release'.equals(variant.buildType.name)) {

                def flavorName = variant.flavorName.startsWith("_") ?
                        variant.flavorName.substring(1) : variant.flavorName

                def apkFile = new File(output.outputFile.getParent(),
                        //渠道，版本，构建时间
                        "Haha_${flavorName}_v${variant.versionName}_${buildTime()}.apk")

//                output.outputFile=apkFile
            }
        }
    }
}

def buildTime() {
    def date = new Date();
    def formattedDate = date.format("yyyyMMdd");
    return formattedDate
}


def getAppVersionName() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--abbrev=0', '--tags'
        standardOutput = stdout
    }
    return stout.toString()
}

def getAppVersionCode() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'tag', '--list'
        standardOutput = stdout
    }
    return stout.toString().split("\n").size()
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

//    api deps.support.multidex

    implementation 'com.android.support.constraint:constraint-layout:+'
    annotationProcessor deps.glide.compiler
    annotationProcessor deps.butterknife.butterknife_compiler
    annotationProcessor deps.alibaba.arouter_compiler
    api project(':module-user')
    api project(':module-home')
    api project(':baselib')

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
